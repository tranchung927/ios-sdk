// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UIComponent
import Foundation
import Swift
@_exported import UIComponent
import UIKit
import _Concurrency
extension UIKit.UIButton {
  @objc(setBackgroundColor:forState:) @_Concurrency.MainActor(unsafe) dynamic public func setBackgroundColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, with color: UIKit.UIColor, and renderMode: UIKit.UIImage.RenderingMode = .alwaysTemplate, for state: UIKit.UIControl.State)
}
extension UIKit.UIImage {
  public static func from(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1), cornerRadius: CoreGraphics.CGFloat = 0.0) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class UIPrimaryButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var calculateIntrinsicContentSizeByLabel: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var mainColor: UIKit.UIColor? {
    @objc get
    @objc set(mainColor)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var highlightedDarkenRatio: CoreGraphics.CGFloat {
    @objc get
    @objc set(highlightedDarkenRatio)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set(highlighted)
  }
  @_Concurrency.MainActor(unsafe) open func commonInit()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
  convenience public init(hsba: (h: CoreGraphics.CGFloat, s: CoreGraphics.CGFloat, b: CoreGraphics.CGFloat, a: CoreGraphics.CGFloat))
  public func hexString() -> Swift.String
  public func rgba() -> (r: CoreGraphics.CGFloat, g: CoreGraphics.CGFloat, b: CoreGraphics.CGFloat, a: CoreGraphics.CGFloat)
  public func hsba() -> (h: CoreGraphics.CGFloat, s: CoreGraphics.CGFloat, b: CoreGraphics.CGFloat, a: CoreGraphics.CGFloat)
  public func lightenedColor(_ percentage: CoreGraphics.CGFloat) -> UIKit.UIColor
  public func darkenedColor(_ percentage: CoreGraphics.CGFloat) -> UIKit.UIColor
  public func red() -> CoreGraphics.CGFloat
  public func green() -> CoreGraphics.CGFloat
  public func blue() -> CoreGraphics.CGFloat
  public func alpha() -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class BaseTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) open var isEnableHighlight: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open class var bundle: Foundation.Bundle {
    get
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open class var nib: UIKit.UINib {
    get
  }
  @_Concurrency.MainActor(unsafe) open class func cellHeight(for data: Any?) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func commonInit()
  @_Concurrency.MainActor(unsafe) open func updateDisplay(with data: Any?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseTableView : UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) open var tableSeparator: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreGraphics.CGRect = .zero, style: UIKit.UITableView.Style = .plain, dataSource: UIKit.UITableViewDataSource?, delegate: UIKit.UITableViewDelegate?)
  @_Concurrency.MainActor(unsafe) open func commonSetup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func registerNib(for cellClass: UIComponent.BaseTableViewCell.Type)
  @_Concurrency.MainActor(unsafe) public func registerNib(for cellClass: UIComponent.BaseTableViewCell.Type, reuseId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func registerClass(for cellClass: UIComponent.BaseTableViewCell.Type)
  @_Concurrency.MainActor(unsafe) public func registerClass(for cellClass: UIComponent.BaseTableViewCell.Type, reuseId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func registerNibs<T>(for cellClasses: [T.Type]) where T : UIComponent.BaseTableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(type: T.Type, withIdentifier identifier: Swift.String? = nil, for indexPath: Foundation.IndexPath) -> T where T : UIComponent.BaseTableViewCell
}
