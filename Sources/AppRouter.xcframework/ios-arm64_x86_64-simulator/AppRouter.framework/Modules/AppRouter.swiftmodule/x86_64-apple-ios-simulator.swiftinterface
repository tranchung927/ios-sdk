// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppRouter
@_exported import AppRouter
import Swift
import UIKit
import _Concurrency
@objc open class Coordinator : ObjectiveC.NSObject {
  public enum NavigationType {
    case currentFlow
    case newFlow(hideBar: Swift.Bool)
  }
  final public let router: AppRouter.Router
  public var childCoordinators: [AppRouter.Coordinator] {
    get
  }
  final public let navigationType: AppRouter.Coordinator.NavigationType
  weak open var root: AppRouter.Presentable? {
    get
  }
  public init(router: AppRouter.Router, navigationType: AppRouter.Coordinator.NavigationType)
  public func addChild(_ coordinator: AppRouter.Coordinator)
  public func setRootChild(coordinator: AppRouter.Coordinator, hideBar: Swift.Bool)
  public func pushChild(coordinator: AppRouter.Coordinator, animated: Swift.Bool, onRemove: (() -> Swift.Void)? = nil)
  public func presentChild(coordinator: AppRouter.Coordinator, animated: Swift.Bool)
  public func dismissChild(_ coordinator: AppRouter.Coordinator, animated: Swift.Bool)
  public func popChild(_ coordinator: AppRouter.Coordinator, animated: Swift.Bool)
  @objc deinit
}
extension AppRouter.Coordinator : AppRouter.Presentable {
  public func toPresentable() -> UIKit.UIViewController
}
@objc @_Concurrency.MainActor(unsafe) open class Router : ObjectiveC.NSObject, AppRouter.Presentable, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) public init(navigationController: UIKit.UINavigationController = UINavigationController())
  @_Concurrency.MainActor(unsafe) open func toPresentable() -> UIKit.UIViewController
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func present(_ presentable: AppRouter.Presentable, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func dismiss(_ presentable: AppRouter.Presentable, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func dismiss(coordinator: AppRouter.Coordinator, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeLatestSameTypeAndPush(_ presentable: AppRouter.Presentable, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func replace(_ presentable: AppRouter.Presentable, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func remove(_ viewControllerTypes: [UIKit.UIViewController.Type])
  @_Concurrency.MainActor(unsafe) public func push(_ presentable: AppRouter.Presentable, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func pop(animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setRoot(_ presentable: AppRouter.Presentable, hideBar: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func popToRoot(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func popTo(_ presentable: AppRouter.Presentable, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func popTo(viewControllerType: UIKit.UIViewController.Type, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
public protocol Presentable : AnyObject {
  func toPresentable() -> UIKit.UIViewController
}
extension UIKit.UIViewController : AppRouter.Presentable {
  @_Concurrency.MainActor(unsafe) public func toPresentable() -> UIKit.UIViewController
}
